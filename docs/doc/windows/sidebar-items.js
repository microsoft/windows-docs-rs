initSidebarItems({"attr":[["implement","Rust structs can use the [`macro@implement`] attribute macro to implement entire WinRT classes or any combination of existing COM and WinRT interfaces."]],"fn":[["factory","Attempts to load the factory interface for the given WinRT class."]],"macro":[["build","A macro for generating WinRT modules to a .rs file at build time."],["include_bindings","Includes the generated bindings into the current context."]],"struct":[["Array","A WinRT array stores elements contiguously in a heap-allocated buffer."],["Error","A WinRT error object consists of both an error code as well as detailed error information for debugging."],["Guid","A globally unique identifier (GUID) used to identify COM and WinRT interfaces."],["HRESULT","A primitive error code value returned by most COM functions."],["HSTRING","A WinRT string, sometimes called an HSTRING, is reference-counted and logically immutable. It should only be used for communicating with WinRT APIs."],["IInspectable","A WinRT object that may be used as a polymorphic stand-in for any WinRT class, interface, or boxed value. [`IInspectable`] represents the IInspectable interface."],["IUnknown","All COM interfaces (and thus WinRT classes and interfaces) implement IUnknown under the hood to provide reference-counted lifetime management as well as the ability to query for additional interfaces that the object may implement."],["Weak","`Weak` holds a non-owning reference to an object."]],"trait":[["Handle","Win32 handle types implement this trait to simplify error handling."],["Interface","Provides low-level access to a COM interface."],["ToImpl","A trait for retrieving the implementation behind a COM or WinRT interface."]],"type":[["Result","A [`Result`] type that provides Windows error information."]]});